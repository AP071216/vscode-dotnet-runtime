trigger:
  batch: true
  branches:
    include:
    - main
  tags:
    include:
    - SDK-v*
    - Runtime-v*
pr:
  autoCancel: false
  branches:
    include:
    - '*'

variables:
- name: is-runtime-release
  value: $[startsWith(variables['Build.SourceBranch'], 'refs/tags/Runtime-v')]
- name: is-sdk-release
  value: $[startsWith(variables['Build.SourceBranch'], 'refs/tags/SDK-v')]
- name: Codeql.Enabled
  value: true

resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  #### 1ES Injections ####
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    pool:
      name: Azure-Pipelines-1ESPT-ExDShared
      image: $(imageName)
    customBuildTags:
    - ES365AIMigrationTooling
    stages:
    ##### Test and Build #####
    - stage: Build
      jobs:

      ##### Build #####
      - job: Build
        displayName: 'üî® Build and Test'
        strategy:
          matrix:
            Linux:
              imageName: 'ubuntu-latest'
            Mac:
              imageName: 'macOS-latest'
            Windows:
              imageName: 'windows-latest'
        templateContext:
          outputs:
          - output: pipelineArtifact
            displayName: 'üåê Publish Logs'
            condition: always()
            targetPath: '$(Build.SourcesDirectory)/vscode-dotnet-runtime-extension/dist/test/functional/logs'
            artifactName: 'logs'
        steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '16.10.0'
          displayName: 'üçö Install Node.js'
        - script: build.cmd
          displayName: üíª Build Windows
          condition: eq(variables['Agent.OS'], 'Windows_NT')
        - script: test.cmd
          displayName: üîç Test Windows
          condition: eq(variables['Agent.OS'], 'Windows_NT')
        - bash: |
            /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
            echo ">>> Started xvfb"
          displayName: üéÆ Start xvfb
          condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))
        - script: ./build.sh
          displayName: üêß Build Mac and Linux
          condition: or(eq(variables['Agent.OS'], 'Darwin'), eq(variables['Agent.OS'], 'Linux'))
        - script: ./test.sh
          displayName: üîé Test Mac and Linux
          env: {DISPLAY: ':99.0'}
          condition: or(eq(variables['Agent.OS'], 'Darwin'), eq(variables['Agent.OS'], 'Linux'))

      ##### TSLint #####
      - job: TSLint
        displayName: 'üèõÔ∏è TSLint'
        steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '16.10.0'
          displayName: 'üçö Install Node.js'
        - bash: |
            npm install --cache /temp/empty-cache
            npm install tslint --reg https://registry.npmjs.org/ --verbose
            npm run lint
          displayName: üß∂ Run Lint

      ##### Verify NPM and Yarn are in sync #####
      - job: SyncPackageManagers
        displayName: '‚ôªÔ∏è Verify NPM & Yarn In-Sync [Local Copy of Target Branch Must Be Up to Date]'
        steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.x'
            addToPath: true
            architecture: 'x64'
        - task: PythonScript@0
          continueOnError: true
          inputs:
            scriptSource: 'filePath'
            scriptPath: 'dependency-verifier.py'
            arguments: '$(System.PullRequest.TargetBranch)'

      ##### Package and Publish #####
      - job: Package
        displayName: 'üì¶ Package and Publish'
        dependsOn:
        - Build
        - TSLint
        condition: succeeded()
        strategy:
          matrix:
            Runtime:
              dir-name: 'vscode-dotnet-runtime-extension'
              package-name: 'vscode-dotnet-runtime'
            SDK:
              dir-name: 'vscode-dotnet-sdk-extension'
              package-name: 'vscode-dotnet-sdk'
        templateContext:
          outputs:
          - output: pipelineArtifact
            displayName: 'üìÇ Publish .VSIX'
            targetPath: '$(Build.ArtifactStagingDirectory)'
            artifactName: '$(dir-name)'
        steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '16.10.0'
          displayName: 'üçö Install Node.js'
        - bash: |
            if ([ $(is-sdk-release) = 'True' ] && [ $(package-name) = 'vscode-dotnet-sdk' ]) || ([ $(is-runtime-release) = 'True' ] && [ $(package-name) = 'vscode-dotnet-runtime' ]); then
              VERSION=`node -p "require('./package.json').version"`
            else
              VERSION_NUM=`node -p "require('./package.json').version"`
              VERSION="$VERSION_NUM-alpha-$(Build.BuildId)"
            fi
            npm version $VERSION --allow-same-version
            echo "##vso[task.setvariable variable=version;isOutput=true]$VERSION"
          name: GetVersion
          displayName: '‚ùì Get Version'
          workingDirectory: $(dir-name)
        - bash: |
            npm install rimraf --reg https://registry.npmjs.org/ --verbose
            npm install vsce -g --reg https://registry.npmjs.org/ --verbose
            vsce package -o $(package-name)-$(GetVersion.version).vsix --ignoreFile ../.vscodeignore --yarn
          displayName: üì¶ Package Artifact
          workingDirectory: $(dir-name)
        - task: CopyFiles@2
          displayName: 'üì© Copy Artifact'
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)'
            Contents: '**\*.vsix'
            TargetFolder: '$(Build.ArtifactStagingDirectory)'
            flattenFolders: true